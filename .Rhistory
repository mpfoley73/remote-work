)
mtrx %>%
flextable() %>%
autofit()
mtrx <- tribble (
~factor, ~level, ~Timezones, ~Collaboration, ~Distractions, ~Lonelines, ~Unplugging, ~Motivation,
"Race", "White", 1, 1, 0, 1, 0, 1,
"Race", "Black", 1, 1, 0, 1, 0, 1,
"Race", "Asian", 1, 1, 0, 1, 0, 1,
"Work Experience", "<6 months", 1, 1, 0, 1, 0, 1,
)
mtrx %>%
flextable() %>%
merge_v(j = 1) %>%
autofit()
mtrx %>%
flextable() %>%
merge_v(j = 1) %>%
autofit() %>%
theme_zebra()
buffer %>% count(struggle, race) %>% pivot_wider(names_from = struggle, values_from = n)
mtrx_race <- buffer %>% count(struggle, race) %>% pivot_wider(names_from = struggle, values_from = n)
mtrx_work <- buffer %>% count(struggle, work_exp) %>% pivot_wider(names_from = struggle, values_from = n)
mtrx_race <- buffer %>% count(struggle, level = race) %>% pivot_wider(names_from = struggle, values_from = n)
mtrx_work <- buffer %>% count(struggle, level = work_exp) %>% pivot_wider(names_from = struggle, values_from = n)
mtrx <- bind_rows(Race = mtrx_race,
`Work Experience` = mtrx_work,
.id = "Factor")
mtrx_race
mtrx_race <- buffer %>% count(struggle, level = race) %>% pivot_wider(names_from = struggle, values_from = n) %>% mutate(level = as.character(level))
mtrx_work <- buffer %>% count(struggle, level = work_exp) %>% pivot_wider(names_from = struggle, values_from = n) %>% mutate(level = as.character(level)
mtrx <- bind_rows(Race = mtrx_race,
mtrx <- bind_rows(Race = mtrx_race,
`Work Experience` = mtrx_work,
.id = "Factor")
mtrx
mtrx <- tribble (
~factor, ~level, ~Timezones, ~Collaboration, ~Distractions, ~Lonelines, ~Unplugging, ~Motivation,
"Race", "White", 1, 1, 0, 1, 0, 1,
"Race", "Black", 1, 1, 0, 1, 0, 1,
"Race", "Asian", 1, 1, 0, 1, 0, 1,
"Work Experience", "<6 months", 1, 1, 0, 1, 0, 1,
)
mtrx <- bind_rows(Race = mtrx_race,
`Work Experience` = mtrx_work,
.id = "Factor")
?rowwise
mtrx_race <- buffer %>% count(struggle, level = race) %>%
group_by(level) %>%
mutate(pct = n / sum(n))
mtrx_race
buffer %>% plot_prop("race",
"Black and Asian struggle more with distractions.")
plot_prop <- function(x, grp_var, grp_title) {
grp_var <- ensym(grp_var)
x %>%
filter(struggle != "Other") %>%
count(struggle, !!grp_var) %>%
group_by(!!grp_var) %>%
mutate(pct = n / sum(n)) %>%
ggplot(aes(x = fct_rev(!!grp_var), y = pct)) +
geom_col(fill = "lightsteelblue", color = "steelblue") +
geom_text(aes(label = n)) +
scale_y_continuous(labels = scales::percent_format()) +
coord_flip() +
theme_light() +
theme(strip.background = element_rect(fill = "gray90"),
strip.text = element_text(color = "steelblue")) +
labs(title = grp_title,
subtitle = codebook %>% filter(item == grp_var) %>% pull(desc),
y = NULL, x = NULL, fill = NULL) +
facet_wrap(facets = vars(struggle))
}
buffer %>% plot_prop("race",
"Black and Asian struggle more with distractions.")
plot_prop <- function(x, grp_var, grp_title) {
grp_var <- ensym(grp_var)
x %>%
filter(struggle != "Other") %>%
count(struggle, !!grp_var) %>%
group_by(!!grp_var) %>%
mutate(pct = n / sum(n)) %>%
ggplot(aes(x = fct_rev(!!grp_var), y = pct)) +
geom_col(fill = "lightsteelblue", color = "steelblue") +
geom_text(aes(label = n), size = 3, nudge_x = -5) +
scale_y_continuous(labels = scales::percent_format()) +
coord_flip() +
theme_light() +
theme(strip.background = element_rect(fill = "gray90"),
strip.text = element_text(color = "steelblue")) +
labs(title = grp_title,
subtitle = codebook %>% filter(item == grp_var) %>% pull(desc),
y = NULL, x = NULL, fill = NULL) +
facet_wrap(facets = vars(struggle))
}
buffer %>% plot_prop("race",
"Black and Asian struggle more with distractions.")
plot_prop <- function(x, grp_var, grp_title) {
grp_var <- ensym(grp_var)
x %>%
filter(struggle != "Other") %>%
count(struggle, !!grp_var) %>%
group_by(!!grp_var) %>%
mutate(pct = n / sum(n)) %>%
ggplot(aes(x = fct_rev(!!grp_var), y = pct)) +
geom_col(fill = "lightsteelblue", color = "steelblue") +
geom_text(aes(label = n), size = 3, nudge_y = -5) +
scale_y_continuous(labels = scales::percent_format()) +
coord_flip() +
theme_light() +
theme(strip.background = element_rect(fill = "gray90"),
strip.text = element_text(color = "steelblue")) +
labs(title = grp_title,
subtitle = codebook %>% filter(item == grp_var) %>% pull(desc),
y = NULL, x = NULL, fill = NULL) +
facet_wrap(facets = vars(struggle))
}
buffer %>% plot_prop("race",
"Black and Asian struggle more with distractions.")
plot_prop <- function(x, grp_var, grp_title) {
grp_var <- ensym(grp_var)
x %>%
filter(struggle != "Other") %>%
count(struggle, !!grp_var) %>%
group_by(!!grp_var) %>%
mutate(pct = n / sum(n)) %>%
ggplot(aes(x = fct_rev(!!grp_var), y = pct)) +
geom_col(fill = "lightsteelblue", color = "steelblue") +
geom_text(aes(label = n), size = 3, nudge_y = -.03) +
scale_y_continuous(labels = scales::percent_format()) +
coord_flip() +
theme_light() +
theme(strip.background = element_rect(fill = "gray90"),
strip.text = element_text(color = "steelblue")) +
labs(title = grp_title,
subtitle = codebook %>% filter(item == grp_var) %>% pull(desc),
y = NULL, x = NULL, fill = NULL) +
facet_wrap(facets = vars(struggle))
}
buffer %>% plot_prop("race",
"Black and Asian struggle more with distractions.")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(flextable())
library(mice)
library(patchwork)
buffer_url <- "https://docs.google.com/spreadsheets/d/1aJFW-_Rq3xNa2Fos-raoA1sF23CwT9sLAfHopjMZnLs/edit?usp=sharing"
codebook <- tribble(
~item, ~desc, ~resp_type,
"country", "What country do you live in currently?", "c",
"industry", "What industry do you work in?", "c",
"industry_other", "Other", "c",
"role", "In the following list, what best describes the work you do?", "c",
"role_other", "Other", "c",
"race", "Which of the following best describes you?", "c",
"race_other", "Other", "c",
"work_exp", "How long have you been in the workforce?", "c",
"remote_exp", "How long have you worked remotely?", "c",
"disability", "Do you have a disability or chronic illness?", "d",
"disability_remote", "Is a disability or chronic illness one of the reasons you pursued remote work?", "d",
"caregiver", "Are you a parent or caregiver?", "d",
"caregiver_remote", "Is being a parent or caregiver one of the reasons you pursued remote work?", "d",
"prefer_remote", "Would you like to work remotely, at least some of the time, for the rest of your career?", "d",
"recommend_remote", "Would you recommend remote work to others?", "d",
"struggle", "What’s your biggest struggle with working remotely?", "c",
"struggle_other", "Other", "c",
"benefit", "What’s the biggest benefit you see to working remotely?", "c",
"benefit_other", "Other", "c",
"covid", "Are you working remotely as a result of COVID-19?", "d",
"permanent", "Is your company planning on permanently allowing remote work?", "c",
"return", "When will you be returning to your workspace and no longer be allowed to work remotely?", "c",
"smooth", "Was your company's transition to remote work smooth?", "d",
"smooth_why", "What made it smooth?", "c",
"smooth_not", "Why not?", "c",
"change", "What has changed the most about your work now that you work remotely?", "c",
"change_other", "Other", "c",
"work_less_more", "Would you say you are working less or more now that you work remotely?", "c",
"meet_more", "Do you find you are in more meetings as a result of the shift to remote work?", "d",
"other_changes", "Is there anything else you'd like to add about how your work has changed now that you work remotely?", "c",
"emp_type", "Which description best suits you?", "c",
"time_zones", "Is your company operating in multiple time zones?", "d",
"time_zones_cnt", "How many time zones do employees at your company span?", "c",
"time_zones_team", "Are people on your immediate team in multiple time zones?", "d",
"asynch", "Does your company encourage asynchronous communication?", "d",
"fte", "How many full-time employees does your company have?", "c",
"pct_remote", "What percentage of your company works remotely?", "c",
"pay_internet", "If you work from home, does your company pay for your home internet?", "c",
"pay_cell", "Does your company pay for your cell phone?", "c",
"pay_membership", "Does your company cover the cost of a coworking membership?", "c",
"pay_computer", "Does your company cover your necessary hardware needs?", "c",
"pay_software", "Does your company cover your necessary software needs?", "c",
"pay_other", "Are there any other costs of working remotely that your company covers?", "c",
"other", "Anything else you want to add that we didn’t ask about?", "c"
)
googlesheets4::gs4_deauth() # not using a private sheet, so no need for token
buffer_0 <- googlesheets4::read_sheet(
buffer_url,
range = "CompleteData!B3:AS2248",
col_names = codebook$item,
col_types = paste(codebook$resp_type, collapse = ""))
dim(buffer_0)
codebook %>%
select(-resp_type) %>%
flextable() %>%
autofit() %>%
theme_zebra() %>%
set_caption("Codebook.")
buffer_1 <- buffer_0 %>%
filter(!is.na(country))
dim(buffer_1)
buffer_2 <- buffer_1 %>%
replace_na(list(industry = "Other",
role = "Other",
race = "Other/Unk",
struggle = "Other",
benefit = "Other",
change = "Other"
)) %>%
select(-contains("other"), pay_other)
dim(buffer_2)
codebook %>%
filter(str_detect(item, "^pay|(time_zones)|(^asynch)")) %>%
select(-resp_type)
buffer_3 <- buffer_2 %>%
select(-starts_with(c("pay", "time", "asynch")))
dim(buffer_3)
codebook %>%
filter(item %in% c("smooth_why", "smooth_not", "change")) %>%
select(-resp_type)
buffer_4 <- buffer_3 %>%
select(-c(smooth_why, smooth_not, change))
dim(buffer_4)
(na_vars <- buffer_4 %>%
skimr::skim() %>%
filter(complete_rate < .5))
buffer_5 <- buffer_4 %>%
select(-na_vars$skim_variable)
skimr::skim(buffer_4)
buffer_6 <- buffer_5 %>%
mutate(#race = factor(case_when(race == "Asian or Pacific Islander" ~ "Asian",
#           race == "Black or African American" ~ "Black",
#           race == "Hispanic or Latino" ~ "Hispanic",
#           race == "Multiracial or Biracial" ~ "Multiracial",
#           race == "Native American or Alaska Native" ~ "Other/Unk",
#           TRUE ~ race),
# levels = c("White", "Black", "Hispanic", "Asian", "Multiracial", "Other/Unk")),
race = fct_lump(race, 1),
work_exp = factor(work_exp, levels = c("Less than six months",
"6 months - 11 months",
"1 year - 4 years",
"5 years - 9 years",
"10 years - 14 years",
"15 years - 19 years",
"More than 20 years"),
ordered = TRUE),
remote_exp = factor(remote_exp, levels = c("Less than six months",
"6 months to 11 months",
"1 year to 4 years",
"5 years - 9 years",
"More than 10 years")),
disability = factor(disability, levels = c(0, 1), labels = c("No", "Yes")),
emp_type = factor(emp_type, levels = c("Business owner",
"Employee",
"Freelancer / Self-employed"),
labels = c("Business Owner", "Employee", "Self-Employed")),
role = case_when(role == "Customer Support" ~ "CSR",
role == "Human Resources" ~ "HR",
role == "Marketing and Advertising" ~ "Marketing",
TRUE ~ role),
role = fct_relevel(role, "Other", after = Inf),
covid = factor(covid, levels = c(0, 1), labels = c("Not Related", "COVID-Related")),
prefer_remote = factor(prefer_remote, levels = c(0, 1), labels = c("No Remote", "Prefer")),
recommend_remote = factor(recommend_remote, levels = c(0, 1), labels = c("No Remote", "Recommend")),
caregiver = factor(caregiver,
levels = c(0, 1),
labels = c("Not Caregiver", "Caregiver")),
benefit = factor(benefit,
levels = c("Ability to have a flexible schedule",
"Ability to spend time with family",
"Ability to work from home",
"Flexibility to work from any location",
"Not having to commute",
"Other"),
labels = c("Flexible Schedule", "Time with Family",
"Work from Home", "Flexible Location",
"No Commute", "Other")),
industry = factor(industry),
fte = factor(fte, levels = c("Just me",
"Fewer than 10",
"11 to 50",
"51 to 100",
"101 to 500",
"501 to 1,000",
"More than 1,001")),
pct_remote = factor(pct_remote, levels = c("1 to 25%",
"26 to 50%",
"51 to 75%",
"76 to 99%",
"100%")),
struggle = factor(struggle,
levels = c("Being in a different timezone than teammates",
"Difficulties with collaboration and communication",
"Distractions at home",
"Loneliness",
"Not being able to unplug",
"Staying motivated",
"Other"),
labels = c("Timezones", "Collaboration",
"Distractions", "Loneliness", "Unplugging",
"Motivation", "Other"))) %>%
select(-contains("other"), -contains("time_zones"), -starts_with("pay"))
buffer_6 %>% count(race)
buffer_7 <- buffer_6 %>%
replace_na(list(disability = "No",
caregiver = median(buffer_5$caregiver, na.rm = TRUE)))
set.seed(2020)
mice_obj <- mice(buffer_7)
buffer_8 <- complete(mice_obj)
p1 <- data.frame(original = buffer_7$fte, mice = buffer_8$fte) %>%
pivot_longer(cols = c("original", "mice"), names_to = "Data", values_to= "Fare") %>%
ggplot(aes(x = Fare, fill = Data)) +
geom_bar(na.rm = TRUE, position = position_dodge()) +
ggthemes::scale_fill_few() +
theme_light() +
theme(legend.position = "top",
axis.text.x = element_text(angle = 90)) +
labs(subtitle = "fte", x = NULL, y = NULL, fill = "")
p2 <- data.frame(original = buffer_7$pct_remote, mice = buffer_8$pct_remote) %>%
pivot_longer(cols = c("original", "mice"), names_to = "Data", values_to= "Fare") %>%
ggplot(aes(x = Fare, fill = Data)) +
geom_bar(na.rm = TRUE, position = position_dodge()) +
ggthemes::scale_fill_few() +
theme_light() +
theme(legend.position = "bottom",
axis.text.x = element_text(angle = 90)) +
labs(subtitle = "pct_remote", x = NULL, y = NULL, fill = "")
p1 + p2 +
patchwork::plot_annotation(title = "Mice Imputations")
skimr::skim(buffer_8)
saveRDS(buffer_8, file = "./buffer.rds")
saveRDS(codebook, file = "./codebook.rds")
buffer_6 %>% count(disability)
buffer_6 %>% count(caregiver)
buffer_7 %>% count(caregiver)
median(buffer_5$caregiver, na.rm = TRUE)
mode(buffer_5$caregiver, na.rm = TRUE)
mode(buffer_5$caregiver)
buffer_7 <- buffer_6 %>%
replace_na(list(disability = "No",
caregiver = "Not Caregiver"))
buffer_7 %>% count(caregiver)
library(tidyverse)
library(ggtext)
library(janitor)
library(flextable)
library(caret)
library(recipes)
buffer <- readRDS("./buffer.rds")
codebook <- readRDS("./codebook.rds")
set.seed(801)
train_idx <- createDataPartition(buffer$struggle, p = 0.8, list = FALSE)
dat_train <- buffer[train_idx, ]
dat_test <- buffer[-train_idx, ]
train_control <- trainControl(
method = "cv",
number = 10,
savePredictions = "final",
classProbs = TRUE
)
mdl_vars <- dat_train %>% select(-c(country, role, industry)) %>% colnames()
mdl_vars
rcpe <- recipe(struggle ~ ., data = dat_train[, mdl_vars]) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
prep(rcpe, training = dat_train)
dat_train %>% select(?all_nominal())
buffer_6 <- buffer_5 %>%
mutate(race = factor(case_when(race == "Asian or Pacific Islander" ~ "Asian",
race == "Black or African American" ~ "Black",
race == "Hispanic or Latino" ~ "Hispanic",
race == "Multiracial or Biracial" ~ "Multiracial",
race == "Native American or Alaska Native" ~ "Other/Unk",
TRUE ~ race),
levels = c("White", "Black", "Hispanic", "Asian", "Multiracial", "Other/Unk")),
# race = fct_lump(race, 1),
work_exp = factor(work_exp, levels = c("Less than six months",
"6 months - 11 months",
"1 year - 4 years",
"5 years - 9 years",
"10 years - 14 years",
"15 years - 19 years",
"More than 20 years"),
ordered = TRUE),
remote_exp = factor(remote_exp, levels = c("Less than six months",
"6 months to 11 months",
"1 year to 4 years",
"5 years - 9 years",
"More than 10 years")),
disability = factor(disability, levels = c(0, 1), labels = c("No", "Yes")),
emp_type = factor(emp_type, levels = c("Business owner",
"Employee",
"Freelancer / Self-employed"),
labels = c("Business Owner", "Employee", "Self-Employed")),
role = case_when(role == "Customer Support" ~ "CSR",
role == "Human Resources" ~ "HR",
role == "Marketing and Advertising" ~ "Marketing",
TRUE ~ role),
role = fct_relevel(role, "Other", after = Inf),
covid = factor(covid, levels = c(0, 1), labels = c("Not Related", "COVID-Related")),
prefer_remote = factor(prefer_remote, levels = c(0, 1), labels = c("No Remote", "Prefer")),
recommend_remote = factor(recommend_remote, levels = c(0, 1), labels = c("No Remote", "Recommend")),
caregiver = factor(caregiver,
levels = c(0, 1),
labels = c("Not Caregiver", "Caregiver")),
benefit = factor(benefit,
levels = c("Ability to have a flexible schedule",
"Ability to spend time with family",
"Ability to work from home",
"Flexibility to work from any location",
"Not having to commute",
"Other"),
labels = c("Flexible Schedule", "Time with Family",
"Work from Home", "Flexible Location",
"No Commute", "Other")),
industry = factor(industry),
fte = factor(fte, levels = c("Just me",
"Fewer than 10",
"11 to 50",
"51 to 100",
"101 to 500",
"501 to 1,000",
"More than 1,001")),
pct_remote = factor(pct_remote, levels = c("1 to 25%",
"26 to 50%",
"51 to 75%",
"76 to 99%",
"100%")),
struggle = factor(struggle,
levels = c("Being in a different timezone than teammates",
"Difficulties with collaboration and communication",
"Distractions at home",
"Loneliness",
"Not being able to unplug",
"Staying motivated",
"Other"),
labels = c("Timezones", "Collaboration",
"Distractions", "Loneliness", "Unplugging",
"Motivation", "Other"))) %>%
select(-contains("other"), -contains("time_zones"), -starts_with("pay"))
set.seed(1970)
mdl_knn <- train(
rcpe,
data = dat_train[, mdl_vars],
# method = "knn",
method = "rpart"
trControl = train_control,
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggtext)
library(janitor)
library(flextable)
library(caret)
library(recipes)
buffer <- readRDS("./buffer.rds")
codebook <- readRDS("./codebook.rds")
set.seed(801)
train_idx <- createDataPartition(buffer$struggle, p = 0.8, list = FALSE)
dat_train <- buffer[train_idx, ]
dat_test <- buffer[-train_idx, ]
train_control <- trainControl(
method = "cv",
number = 10,
savePredictions = "final",
classProbs = TRUE
)
mdl_vars <- dat_train %>% select(-c(country, role, industry)) %>% colnames()
mdl_vars
rcpe <- recipe(struggle ~ ., data = dat_train[, mdl_vars]) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
prep(rcpe, training = dat_train)
dat_train %>% select(all_nominal())
set.seed(1970)
mdl_knn <- train(
rcpe,
data = dat_train[, mdl_vars],
# method = "knn",
method = "rpart",
trControl = train_control,
tuneGrid = expand.grid(k = c(25, 50, 100, 150, 200, 250, 300, 350)),
metric = "Accuracy"
)
# mdl_knn <- train(
#   rcpe,
#   data = dat_train[, mdl_vars],
#   # method = "knn",
#   method = "rpart",
#   trControl = train_control,
#   tuneGrid = expand.grid(k = c(25, 50, 100, 150, 200, 250, 300, 350)),
#   metric = "Accuracy"
# )
mdl_knn <- train(
rcpe,
data = dat_train[, mdl_vars],
method = "rpart",
trControl = train_control,
tuneLength = 5,
metric = "Accuracy"
)
mdl_knn
